Q1: What happens when you initialize a repository? Why do you need to do it?
A1: Initializing a repository by "git init" command adds .git folder to 
the current working directory, so that git can start tracking commits.

Q2: How is the staging area different from the working directory and the 
repository? What value do you think it offers?
A2: Working directory is a physical folder on your computer. "git init"
 creates a repository. files needs to be added to the staging area by 
"git add <fileName>" in order to be able to commit changes and track 
files. The main benefit of staging in my opinion would be that you 
can selectively add files to the repository.

Q3: How can you use the staging area to make sure you have one commit per logical change?
A3: "git add <fileName>" only once then commit. If you add multiple files, the commit will submit them all under one commit message

Q4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A4: When I want to do a dramatical change to try it out or to add language. Branch would create a path of commits that would start from a common point with a master brach or other, but it would be separated from one another.

Q5: How do the diagrams help you visualize the branch structure?
A5: Branches at a diagram can be drawn parallel, thus helps it better visualize parrent commits and dependencies?

Q6: What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?
A6: Mergint two branches combine the changes made within those branches 
if there are no conflicts.

Q7: What are the pros and cons of Gitâ€™s automatic merging vs. always 
doing merges manually?
A7: Git can merge files seamlesly if they are written 
without a conflict, thus user does not have to worry about it. When 
there is an conflict though, manual action has to be taken anyway. On 
contrary, manual merging would give the user a full control over 
combining branches.
